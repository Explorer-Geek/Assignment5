name: Python Application CD

on:
  push:
    branches: [ main ]

env:
  TAG: latest
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: cicd
  
jobs:
  Deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ${{secrets.USER_NAME}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          export TAG=$(git rev-parse --short HEAD)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TAG .
          docker save $ECR_REGISTRY/$ECR_REPOSITORY:$TAG | ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} sudo docker load
      
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
      #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG" >> $GITHUB_OUTPUT

      # - name: Pull and Deploy from Amazon ECR to EC2
      #   env:
      #       PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #       HOSTNAME: ${{secrets.SSH_HOST}}
      #       USER_NAME: ${{secrets.USER_NAME}}
      #   run: |
      #     echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
      #     ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} TAG=$TAG "sudo docker pull 212794742027.dkr.ecr.ap-south-1.amazonaws.com/cicd:$TAG && sudo docker stop $(sudo docker container ls -q) && sudo docker run -d -p 8080:80 212794742027.dkr.ecr.ap-south-1.amazonaws.com/cicd:$TAG"
      #     # ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "sudo docker container ls"
